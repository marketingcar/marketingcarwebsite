/**
 * Content sanitizer for blog posts to fix formatting issues,
 * especially for BabyLoveGrowth posts with duplicate images
 * and poor spacing.
 */

export function sanitizeBlogContent(content, source = 'unknown') {
  if (!content || typeof content !== 'string') {
    return content;
  }

  // Special handling for BabyLoveGrowth posts
  if (source === 'babylovegrowth') {
    return sanitizeBabyLoveContent(content);
  }

  // General sanitization for all posts
  return generalSanitization(content);
}

function sanitizeBabyLoveContent(content) {
  let sanitized = content;

  // Remove duplicate images by tracking seen image URLs
  const seenImages = new Set();
  sanitized = sanitized.replace(/<img[^>]*src="([^"]*)"[^>]*>/g, (match, src) => {
    if (seenImages.has(src)) {
      return ''; // Remove duplicate image
    }
    seenImages.add(src);

    // Clean up the image tag and ensure proper styling
    return match.replace(/<img([^>]*)>/, (imgMatch, attributes) => {
      // Remove any inline styles and add proper classes
      let cleanAttributes = attributes
        .replace(/style="[^"]*"/g, '')
        .replace(/class="[^"]*"/g, '');

      return `<img${cleanAttributes} class="blog-image w-full h-auto rounded-lg shadow-md my-8 object-cover max-h-[400px]" loading="lazy">`;
    });
  });

  // Remove excessive spacing and empty paragraphs
  sanitized = sanitized.replace(/(<p>\s*<\/p>\s*){2,}/g, '');
  sanitized = sanitized.replace(/(\s*<br\s*\/?>\s*){3,}/g, '<br><br>');

  // Fix spacing around headings
  sanitized = sanitized.replace(/(<\/h[1-6]>)\s*(<h[1-6])/g, '$1\n\n$2');
  sanitized = sanitized.replace(/(<\/p>)\s*(<h[1-6])/g, '$1\n\n$2');
  sanitized = sanitized.replace(/(<\/h[1-6]>)\s*(<p)/g, '$1\n\n$2');

  // Remove or replace promotional content that doesn't match the site
  sanitized = sanitized.replace(
    /\b(Article generated by BabyLoveGrowth|Generated with \[Claude Code\])\b/g,
    ''
  );

  // Remove excessive table styling and simplify tables
  sanitized = sanitized.replace(/(<table[^>]*) style="[^"]*"/g, '$1');
  sanitized = sanitized.replace(/(<td[^>]*) style="[^"]*"/g, '$1');
  sanitized = sanitized.replace(/(<th[^>]*) style="[^"]*"/g, '$1');

  // Clean up links to ensure they're properly styled
  sanitized = sanitized.replace(/<a([^>]*href="[^"]*"[^>]*)>/g, '<a$1 class="text-highlight hover:text-primary transition-colors underline">');

  return generalSanitization(sanitized);
}

function generalSanitization(content) {
  let sanitized = content;

  // Ensure all images have proper responsive classes
  sanitized = sanitized.replace(/<img(?![^>]*class=)/g, '<img class="blog-image w-full h-auto rounded-lg shadow-md my-6 object-cover"');

  // Add proper spacing classes to paragraphs if they don't have them
  sanitized = sanitized.replace(/<p(?![^>]*class=)([^>]*)>/g, '<p class="mb-4"$1>');

  // Add proper classes to lists
  sanitized = sanitized.replace(/<ul(?![^>]*class=)/g, '<ul class="list-disc list-inside mb-4 space-y-2"');
  sanitized = sanitized.replace(/<ol(?![^>]*class=)/g, '<ol class="list-decimal list-inside mb-4 space-y-2"');

  // Add proper classes to headings within content
  sanitized = sanitized.replace(/<h2(?![^>]*class=)/g, '<h2 class="text-2xl font-bold mt-8 mb-4 text-primary"');
  sanitized = sanitized.replace(/<h3(?![^>]*class=)/g, '<h3 class="text-xl font-semibold mt-6 mb-3 text-primary"');
  sanitized = sanitized.replace(/<h4(?![^>]*class=)/g, '<h4 class="text-lg font-medium mt-4 mb-2 text-primary"');

  // Clean up excessive whitespace
  sanitized = sanitized.replace(/\s+/g, ' ');
  sanitized = sanitized.replace(/>\s+</g, '><');

  return sanitized.trim();
}

export function getProcessedContent(post) {
  if (!post) return '';

  // Use the existing sanitizedContent logic from BlogPostPage but enhanced
  let content = post.content || '';

  // Remove duplicate H1 from content (BlogPostPage has its own H1)
  content = content.replace(/<h1[\s\S]*?<\/h1>/i, '');

  // For BabyLoveGrowth posts, remove the first image if it matches the featured image
  if (post.source === 'babylovegrowth' && post.image_url) {
    const firstImgMatch = content.match(/<img[^>]*src="([^"]*)"[^>]*>/i);
    if (firstImgMatch && firstImgMatch[1] === post.image_url) {
      content = content.replace(/<img[^>]*>/i, '');
    } else {
      // If no match, still remove the first image as it's likely a duplicate
      content = content.replace(/<img[^>]*>/i, '');
    }
  }

  // Apply content sanitization
  content = sanitizeBlogContent(content, post.source);

  return content;
}